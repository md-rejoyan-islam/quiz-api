openapi: 3.0.0
info:
  title: Quiz API
  description: A comprehensive API for managing users, quizzes, questions, and attempts.
  version: 1.0.0
servers:
  - url: http://localhost:5000/api/v1
    description: Development server
tags:
  - name: User & Auth
    description: "Endpoints for user authentication and profile management."
  - name: User Management
    description: "Endpoints for managing users (profiles, status, and related data)."
  - name: Quiz Management
    description: "Endpoints for creating, updating, and managing quizzes."
  - name: Question Management
    description: "Endpoints for managing questions within quizzes."
  - name: Quiz Interaction
    description: "Endpoints for users to attempt quizzes, view results, and provide ratings."

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Enter JWT token in the format: Bearer <token>"

  schemas:
    # --- ENUMS ---
    QuizSetLabel:
      type: string
      enum: [easy, medium, hard]
      description: The difficulty label for a quiz set.
    QuizSetStatus:
      type: string
      enum: [draft, published]
      description: The publication status of a quiz set.
    UserRole:
      type: string
      enum: [admin, user]
      description: The role of a user in the system.

    # --- CORE MODELS (Unchanged from original spec) ---
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fullName:
          type: string
        email:
          type: string
          format: email
        bio:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
        role:
          $ref: "#/components/schemas/UserRole"
        isBanned:
          type: boolean
          description: "Indicates if the user is banned from the platform."
          default: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Question:
      type: object
      properties:
        id:
          type: string
          format: uuid
        quizSetId:
          type: string
          format: uuid
        question:
          type: string
        options:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
        correctAnswers:
          type: array
          items:
            type: integer
          description: Array of indices corresponding to the correct options.
        mark:
          type: number
        time:
          type: integer
          description: Time limit for the question in seconds.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    QuizSet:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/QuizSetStatus"
        label:
          $ref: "#/components/schemas/QuizSetLabel"
        userId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/User"
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
        ratings:
          type: array
          items:
            $ref: "#/components/schemas/QuizSetRating"
        attempts:
          type: array
          items:
            $ref: "#/components/schemas/Attempt"

    QuizSetRating:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        quizId:
          type: string
          format: uuid
        rating:
          type: integer
          minimum: 0
          maximum: 5
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    SubmittedAnswer:
      type: object
      properties:
        questionId:
          type: string
          format: uuid
        selectedAnswers:
          type: array
          items:
            type: string
          description: The indices of the answers selected by the user.

    Attempt:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        quizId:
          type: string
          format: uuid
        score:
          type: number
        correct:
          type: integer
        wrong:
          type: integer
        skipped:
          type: integer
        submittedAnswers:
          type: array
          items:
            $ref: "#/components/schemas/SubmittedAnswer"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # --- REQUEST/RESPONSE SCHEMAS ---
    UserRegistration:
      type: object
      required: [fullName, email, password]
      properties:
        fullName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UpdateUserProfile:
      type: object
      properties:
        fullName:
          type: string
        bio:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true

    UserLogin:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        user:
          $ref: "#/components/schemas/User"

    RefreshToken:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string

    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        error:
          type: string

    CreateQuizSet:
      type: object
      required: [title, description, tags, status, label, userId]
      properties:
        title:
          type: string
        description:
          type: string
        userId:
          type: string
        tags:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/QuizSetStatus"
        label:
          $ref: "#/components/schemas/QuizSetLabel"

    UpdateQuizSet:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/QuizSetStatus"
        label:
          $ref: "#/components/schemas/QuizSetLabel"

    CreateQuestion:
      type: object
      required: [question, options, correctAnswers, mark, time]
      properties:
        question:
          type: string
        options:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
        correctAnswers:
          type: array
          items:
            type: integer
        mark:
          type: number
        time:
          type: integer

    UpdateQuestion:
      type: object
      properties:
        question:
          type: string
        options:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
        correctAnswers:
          type: array
          items:
            type: integer
        mark:
          type: number
        time:
          type: integer

    SubmitAttempt:
      type: object
      required: [submittedAnswers]
      properties:
        submittedAnswers:
          type: array
          items:
            $ref: "#/components/schemas/SubmittedAnswer"

    RateQuizSet:
      type: object
      required: [rating]
      properties:
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          description: A rating value between 0 and 5.

  responses:
    UnauthorizedError:
      description: "Authentication information is missing or invalid."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    ForbiddenError:
      description: "User is not authorized to perform this action."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFoundError:
      description: "The requested resource was not found."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

# API Routes
paths:
  # --- User & Auth Routes (Unchanged) ---
  /auth/register:
    post:
      tags: [User & Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request or user already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/login:
    post:
      tags: [User & Auth]
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/refresh-token:
    post:
      tags: [User & Auth]
      summary: Get a new access token using a refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshToken"
      responses:
        "200":
          description: New access token generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponse"
        "401":
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/me:
    get:
      tags: [User & Auth]
      summary: Get current user's profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  # --- User Management Routes ---
  /users:
    get:
      tags: [User Management]
      summary: Get all users
      description: Retrieves a list of all users. Requires ADMIN role.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /users/{id}:
    get:
      tags: [User Management]
      summary: Get user by ID
      description: Retrieves a user's profile. Requires ADMIN role or for the user to be the owner of the resource.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User profile retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    put:
      tags: [User Management]
      summary: Update user by ID
      description: Updates a user's profile. Requires ADMIN role or for the user to be the owner of the resource.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserProfile"
      responses:
        "200":
          description: User profile updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags: [User Management]
      summary: Delete user by ID
      description: Deletes a user. Requires ADMIN role or for the user to be the owner of the resource.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /users/{id}/quizzes:
    get:
      tags: [User Management]
      summary: Get all quizzes created by a user
      description: Retrieves all quizzes created by a specific user. Requires ADMIN role or for the user to be the owner of the resource.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of quizzes created by the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuizSet"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /users/{id}/attempts:
    get:
      tags: [User Management]
      summary: Get all quiz attempts by a user
      description: Retrieves all quiz attempts made by a specific user. Requires ADMIN role or for the user to be the owner of the resource.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of attempts made by the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attempt"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /users/{id}/ratings:
    get:
      tags: [User Management]
      summary: Get all ratings submitted by a user
      description: Retrieves all ratings submitted by a specific user. Requires ADMIN role or for the user to be the owner of the resource.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of ratings submitted by the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuizSetRating"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /users/{id}/ban:
    post:
      tags: [User Management]
      summary: Ban a user
      description: Marks a user as banned. Requires ADMIN role.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User banned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /users/{id}/unban:
    post:
      tags: [User Management]
      summary: Unban a user
      description: Re-instates a banned user. Requires ADMIN role.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User unbanned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  # --- NEW Quiz Management Routes ---
  /quiz-sets:
    post:
      tags: [Quiz Management]
      summary: Create a new quiz set
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQuizSet"
      responses:
        "201":
          description: Quiz created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizSet"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    get:
      tags: [Quiz Management]
      summary: Get all published quizzes
      responses:
        "200":
          description: A list of all published quizzes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuizSet"

  /quiz-sets/{id}:
    get:
      tags: [Quiz Management]
      summary: Get a specific quiz by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Quiz details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizSet"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    put:
      tags: [Quiz Management]
      summary: Update a quiz by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQuizSet"
      responses:
        "200":
          description: Quiz updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizSet"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags: [Quiz Management]
      summary: Delete a quiz by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Quiz deleted successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /quiz-sets/{id}/publish:
    put:
      tags: [Quiz Management]
      summary: Publish a quiz set
      description: Changes the status of a quiz from DRAFT to PUBLISHED. Only the owner or an admin can perform this action.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Quiz published successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizSet"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  # --- NEW Question Management Routes ---
  /quiz-sets/{quizId}/questions:
    get:
      tags: [Question Management]
      summary: Get all questions for a specific quiz
      security:
        - bearerAuth: []
      parameters:
        - name: quizId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of questions for the quiz.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    post:
      tags: [Question Management]
      summary: Create a new question for a quiz
      security:
        - bearerAuth: []
      parameters:
        - name: quizId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQuestion"
      responses:
        "201":
          description: Question created and added to the quiz.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /quiz-sets/{quizId}/questions/bulk:
    post:
      tags: [Question Management]
      summary: Bulk create new questions for a quiz
      security:
        - bearerAuth: []
      parameters:
        - name: quizId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CreateQuestion"
      responses:
        "201":
          description: Questions created successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /questions/{id}:
    get:
      tags: [Question Management]
      summary: Get a single question by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Question details retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    put:
      tags: [Question Management]
      summary: Update a question by ID
      description: This action is only allowed when the parent quiz set is in DRAFT status.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQuestion"
      responses:
        "200":
          description: Question updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags: [Question Management]
      summary: Delete a question by ID
      description: This action is only allowed when the parent quiz set is in DRAFT status.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Question deleted successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  # --- NEW Quiz Interaction Routes ---
  /quiz-sets/{quizId}/attempts:
    get:
      tags: [Quiz Interaction]
      summary: Get all attempts for a specific quiz
      description: Requires admin role to see all attempts. Regular users may see their own.
      security:
        - bearerAuth: []
      parameters:
        - name: quizId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of attempts for the quiz.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attempt"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /quiz-sets/{quizId}/attempt:
    post:
      tags: [Quiz Interaction]
      summary: Submit an attempt for a quiz
      security:
        - bearerAuth: []
      parameters:
        - name: quizId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitAttempt"
      responses:
        "201":
          description: Attempt submitted successfully. Returns the result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attempt"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /quiz-sets/{quizId}/rate:
    post:
      tags: [Quiz Interaction]
      summary: Rate a quiz set
      security:
        - bearerAuth: []
      parameters:
        - name: quizId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RateQuizSet"
      responses:
        "201":
          description: Rating submitted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuizSetRating"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
