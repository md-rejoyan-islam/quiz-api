openapi: 3.0.0
info:
  title: Quiz API
  description: A comprehensive API for managing users, quizzes, questions, and attempts.
  version: 1.0.0
servers:
  - url: http://localhost:5000/api/v1
    description: Development server
tags:
  - name: Authentication
    description: Endpoints for user registration, login, token management, and password changes.
  - name: User Profile
    description: Endpoints for the currently authenticated user to manage their own profile.
  - name: User Management
    description: Endpoints for admins to manage all users (profiles, status, and related data).
  - name: Quiz Management
    description: Endpoints for admins to create, update, and manage quizzes.
  - name: Question Management
    description: Endpoints for managing questions within quizzes.
  - name: Quiz Interaction
    description: Endpoints for users to discover, attempt, and rate quizzes.

paths:
  # --- AUTHENTICATION ---
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistrationInput"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "422":
          $ref: "#/components/responses/ValidationError"
        "409":
          $ref: "#/components/responses/ConflictError"

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginInput"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/refresh-token:
    post:
      tags: [Authentication]
      summary: Get a new access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenInput"
      responses:
        "200":
          description: New access token generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout a user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/forgot-password:
    post:
      tags: [Authentication]
      summary: Request a password reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Password reset link sent if user exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/reset-password/{token}:
    patch:
      tags: [Authentication]
      summary: Reset password with a token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password:
                  type: string
                  format: password
                  minLength: 8
      responses:
        "200":
          description: Password has been reset successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/change-password:
    patch:
      tags: [Authentication]
      summary: Change current user's password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordInput"
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"

  # --- USER PROFILE ---
  /auth/me:
    get:
      tags: [User Profile]
      summary: Get current user's profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  # --- USER MANAGEMENT ---
  /users:
    get:
      tags: [User Management]
      summary: Get all users (Admin only)
      description: Retrieves a list of all users. Requires ADMIN role.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of users.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /users/{id}:
    get:
      tags: [User Management]
      summary: Get user by ID
      description: Retrieves a user's profile. Requires ADMIN role or for the user to be the owner of the resource.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: User profile retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags: [User Management]
      summary: Update user by ID
      description: Updates a user's profile. Requires ADMIN role or for the user to be the owner of the resource.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserInput"
      responses:
        "200":
          description: User profile updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags: [User Management]
      summary: Delete user by ID
      description: Deletes a user. Requires ADMIN role or for the user to be the owner of the resource.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: User deleted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /users/{id}/quizzes:
    get:
      tags: [User Management]
      summary: Get all quizzes created by a user
      description: Retrieves all quizzes by user ID. Requires ADMIN or owner role.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: A list of quizzes created by the user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      quizzes:
                        type: array
                        items:
                          $ref: "#/components/schemas/QuizSet"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /users/{id}/attempts:
    get:
      tags: [User Management]
      summary: Get all quiz attempts by a user
      description: Retrieves all quiz attempts by user ID. Requires ADMIN or owner role.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: A list of attempts made by the user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      attempts:
                        type: array
                        items:
                          $ref: "#/components/schemas/Attempt"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /users/{id}/ratings:
    get:
      tags: [User Management]
      summary: Get all ratings submitted by a user
      description: Retrieves all ratings by user ID. Requires ADMIN or owner role.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: A list of ratings submitted by the user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      ratings:
                        type: array
                        items:
                          $ref: "#/components/schemas/QuizSetRating"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /users/{id}/ban:
    post:
      tags: [User Management]
      summary: Ban a user (Admin only)
      description: Sets a user's status to INACTIVE. Requires ADMIN role.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: User banned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /users/{id}/unban:
    post:
      tags: [User Management]
      summary: Unban a user (Admin only)
      description: Sets a user's status to ACTIVE. Requires ADMIN role.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: User unbanned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  # --- QUIZ MANAGEMENT & INTERACTION ---
  /quiz-sets:
    get:
      tags: [Quiz Interaction]
      summary: Get all published quizzes
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A list of all published quizzes.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      quizzes:
                        type: array
                        items:
                          $ref: "#/components/schemas/QuizSet"
    post:
      tags: [Quiz Management]
      summary: Create a new quiz set (Admin only)
      security:
        - bearerAuth: []
      description: Creates a new Quiz Set. Requires ADMIN role. The quiz is assigned to the authenticated admin.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQuizSetInput"
      responses:
        "201":
          description: Quiz created successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      quiz:
                        $ref: "#/components/schemas/QuizSet"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /quiz-sets/{id}:
    get:
      tags: [Quiz Interaction]
      summary: Get a specific quiz by ID
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: Quiz details retrieved successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      quiz:
                        $ref: "#/components/schemas/QuizSet"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags: [Quiz Management]
      summary: Update a quiz by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQuizSetInput"
      responses:
        "200":
          description: Quiz updated successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      quiz:
                        $ref: "#/components/schemas/QuizSet"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags: [Quiz Management]
      summary: Delete a quiz by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: Quiz deleted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /quiz-sets/{id}/publish:
    patch:
      tags: [Quiz Management]
      summary: Publish a quiz set (Admin only)
      description: Changes the status of a quiz from DRAFT to PUBLISHED. Requires ADMIN role.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: Quiz published successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      quiz:
                        $ref: "#/components/schemas/QuizSet"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /quiz-sets/{id}/attempt:
    post:
      tags: [Quiz Interaction]
      summary: Submit an attempt for a quiz
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAttemptInput"
      responses:
        "201":
          description: Attempt submitted successfully. Returns the result.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      attempt:
                        $ref: "#/components/schemas/Attempt"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /quiz-sets/{id}/attempts:
    get:
      tags: [Quiz Management]
      summary: Get all attempts for a quiz (Admin only)
      description: Requires ADMIN role to see all attempts for a quiz.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: A list of attempts for the quiz.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      attempts:
                        type: array
                        items:
                          $ref: "#/components/schemas/Attempt"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /quiz-sets/{id}/rate:
    post:
      tags: [Quiz Interaction]
      summary: Rate a quiz set
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rating]
              properties:
                rating:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 5
      responses:
        "201":
          description: Rating submitted successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      rating:
                        $ref: "#/components/schemas/QuizSetRating"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/ConflictError"

  # --- QUESTION MANAGEMENT ---
  /quiz-sets/{quizId}/questions:
    get:
      tags: [Question Management]
      summary: Get all questions for a specific quiz
      parameters:
        - $ref: "#/components/parameters/QuizIdPath"
      responses:
        "200":
          description: A list of questions for the quiz.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      questions:
                        type: array
                        items:
                          $ref: "#/components/schemas/Question"
        "404":
          $ref: "#/components/responses/NotFoundError"
    post:
      tags: [Question Management]
      summary: Create a new question for a quiz (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/QuizIdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQuestionInput"
      responses:
        "201":
          description: Question created and added to the quiz.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      question:
                        $ref: "#/components/schemas/Question"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /quiz-sets/{quizId}/questions/bulk:
    post:
      tags: [Question Management]
      summary: Bulk create questions for a quiz (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/QuizIdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                questions:
                  type: array
                  items:
                    $ref: "#/components/schemas/CreateQuestionInput"
      responses:
        "201":
          description: Questions created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /questions/{id}:
    get:
      tags: [Question Management]
      summary: Get a single question by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: Question details retrieved.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      question:
                        $ref: "#/components/schemas/Question"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags: [Question Management]
      summary: Update a question by ID (Admin only)
      description: This action is only allowed when the parent quiz set is in DRAFT status.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQuestionInput"
      responses:
        "200":
          description: Question updated successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      question:
                        $ref: "#/components/schemas/Question"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags: [Question Management]
      summary: Delete a question by ID (Admin only)
      description: This action is only allowed when the parent quiz set is in DRAFT status.
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200":
          description: Question deleted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

# --- Reusable Components ---
components:
  # --- Security ---
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # --- Parameters ---
  parameters:
    IdPath:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    QuizIdPath:
      name: quizId
      in: path
      required: true
      schema:
        type: string
        format: uuid

  # --- Schemas (Data Models) ---
  schemas:
    # --- Enums ---
    UserRole:
      type: string
      enum: [admin, user]
    UserStatus:
      type: string
      enum: [active, inactive]
    QuizStatus:
      type: string
      enum: [draft, published]
    QuizLabel:
      type: string
      enum: [easy, medium, hard]

    # --- Core Models ---
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fullName:
          type: string
        email:
          type: string
          format: email
        bio:
          type: string
          nullable: true
        photo:
          type: string
          nullable: true
        status:
          $ref: "#/components/schemas/UserStatus"
        role:
          $ref: "#/components/schemas/UserRole"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Question:
      type: object
      properties:
        id:
          type: string
          format: uuid
        quizSetId:
          type: string
          format: uuid
        question:
          type: string
        options:
          type: array
          items:
            type: string
        answerIndices:
          type: array
          items:
            type: integer
          description: Array of 0-based indices corresponding to the correct options.
        mark:
          type: integer
        time:
          type: integer
          description: Time limit for the question in seconds.
        explanation:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    QuizSet:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/QuizStatus"
        label:
          $ref: "#/components/schemas/QuizLabel"
        userId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Attempt:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        quizSetId:
          type: string
          format: uuid
        submittedAnswers:
          type: object
          description: An object where keys are question UUIDs and values are arrays of selected answer indices.
          additionalProperties:
            type: array
            items:
              type: integer
        score:
          type: integer
        correct:
          type: integer
        wrong:
          type: integer
        time:
          type: integer
        skipped:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    QuizSetRating:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        quizSetId:
          type: string
          format: uuid
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # --- Request Body Schemas ---
    UserRegistrationInput:
      type: object
      required: [fullName, email, password]
      properties:
        fullName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
    UserLoginInput:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    RefreshTokenInput:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string
    ChangePasswordInput:
      type: object
      required: [oldPassword, newPassword]
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    UpdateUserInput:
      type: object
      properties:
        fullName:
          type: string
        bio:
          type: string
          nullable: true
    CreateQuizSetInput:
      type: object
      required: [title, description, tags, label]
      properties:
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/QuizStatus"
        label:
          $ref: "#/components/schemas/QuizLabel"
    UpdateQuizSetInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/QuizStatus"
        label:
          $ref: "#/components/schemas/QuizLabel"
    CreateQuestionInput:
      type: object
      required: [question, options, answerIndices]
      properties:
        question:
          type: string
        options:
          type: array
          items:
            type: string
          minItems: 4
        answerIndices:
          type: array
          items:
            type: integer
          minItems: 1
        mark:
          type: integer
        time:
          type: integer
        explanation:
          type: string
          nullable: true
    UpdateQuestionInput:
      type: object
      properties:
        question:
          type: string
        options:
          type: array
          items:
            type: string
        answerIndices:
          type: array
          items:
            type: integer
        mark:
          type: integer
        time:
          type: integer
        explanation:
          type: string
          nullable: true
    CreateAttemptInput:
      type: object
      required: [submittedAnswers, time]
      properties:
        submittedAnswers:
          type: object
          description: An object where keys are question UUIDs and values are arrays of selected answer indices.
          additionalProperties:
            type: array
            items:
              type: integer
        time:
          type: integer
          description: Total time taken in seconds.

    # --- Response Schemas ---
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Success
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
              message:
                type: string
        stack:
          type: string
          description: "Stack trace for debugging (only in development)"
    LoginResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessResponse"
        - type: object
          properties:
            user:
              $ref: "#/components/schemas/User"
            accessToken:
              type: string
            refreshToken:
              type: string
    UserResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessResponse"
        - type: object
          properties:
            user:
              $ref: "#/components/schemas/User"
    RefreshTokenResponse:
      allOf:
        - $ref: "#/components/schemas/SuccessResponse"
        - type: object
          properties:
            accessToken:
              type: string

  # --- Reusable Responses ---
  responses:
    UnauthorizedError:
      description: Authentication information is missing, invalid, or expired.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    ForbiddenError:
      description: User is not authorized to perform this action.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFoundError:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    ValidationError:
      description: The request body or parameters are invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    ConflictError:
      description: The request could not be completed due to a conflict with the current state of the target resource (e.g., duplicate unique field).
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    BadRequestError:
      description: The server cannot or will not process the request due to something that is perceived to be a client error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
